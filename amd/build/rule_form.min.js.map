{"version":3,"file":"rule_form.min.js","sources":["../src/rule_form.js"],"sourcesContent":["define(['jquery', 'core/log'], function($, log) {\n    'use strict';\n\n    var SELECTORS = {\n        RULE_SET_ID: 'select[name=\"rulesetid\"]',\n        NEW_RULE_SET_NAME: 'input[name=\"newrulesetname\"]',\n        NEW_RULE_SET_DESCRIPTION: 'textarea[name=\"newrulesetdescription\"]',\n        // Condition Segment Selectors (base for cloning)\n        SEGMENT_WRAPPER: '.conditionsegment-wrapper',\n        TARGET_TYPE: 'select[name^=\"chain_\"][name$=\"_target_type\"]', // Starts with chain_, ends with _target_type\n        TARGET_IDENTIFIER: 'input[name^=\"chain_\"][name$=\"_target_identifier\"]',\n        CHECK_TYPE: 'select[name^=\"chain_\"][name$=\"_check_type\"]',\n        CONTENT_CHILD_TYPE: 'select[name^=\"chain_\"][name$=\"_content_child_type\"]',\n        CONTENT_CHILD_IDENTIFIER: 'input[name^=\"chain_\"][name$=\"_content_child_identifier\"]',\n        SETTING_NAME: 'input[name^=\"chain_\"][name$=\"_setting_name\"]',\n        SETTING_OPERATOR: 'select[name^=\"chain_\"][name$=\"_setting_operator\"]',\n        SETTING_EXPECTED_VALUE: 'input[name^=\"chain_\"][name$=\"_setting_expected_value\"]',\n        // Action Selectors (base for cloning)\n        ACTION_WRAPPER: '.action-wrapper',\n        ACTION_TYPE: 'select[name^=\"action_\"][name$=\"_type\"]',\n        ACTION_CHANGE_SETTING_NAME: 'input[name^=\"action_\"][name$=\"_change_setting_name\"]',\n        ACTION_CHANGE_SETTING_NEW_VALUE: 'input[name^=\"action_\"][name$=\"_change_setting_new_value\"]',\n        ACTION_ADD_CONTENT_CHILD_TYPE: 'select[name^=\"action_\"][name$=\"_add_content_child_type\"]',\n        ACTION_ADD_CONTENT_CHILD_IDENTIFIER: 'input[name^=\"action_\"][name$=\"_add_content_child_identifier\"]',\n        ACTION_ADD_CONTENT_INITIAL_SETTINGS: 'textarea[name^=\"action_\"][name$=\"_add_content_initial_settings\"]',\n        // Buttons\n        ADD_SEGMENT_BUTTON_PREFIX: 'button[name^=\"add_segment_to_chain_\"]', // e.g. add_segment_to_chain_0\n        ADD_CHAIN_BUTTON: 'button[name=\"add_condition_chain\"]',\n        ADD_ACTION_BUTTON: 'button[name=\"add_failure_action\"]'\n    };\n\n    // Store parent form elements for repeated searches\n    var form = null;\n\n    const getField = function(selector, baseElement) {\n        return baseElement ? baseElement.find(selector) : form.find(selector);\n    };\n\n    const getFieldRow = function(selector, baseElement) {\n        return getField(selector, baseElement).closest('.fitem, .form-group'); // Moodle forms use fitem, Boost uses form-group\n    };\n\n    const toggleRuleSetFields = function() {\n        var ruleSetId = getField(SELECTORS.RULE_SET_ID).val();\n        var $newNameField = getField(SELECTORS.NEW_RULE_SET_NAME);\n        var $newDescField = getField(SELECTORS.NEW_RULE_SET_DESCRIPTION);\n\n        if (ruleSetId === '0') {\n            $newNameField.prop('disabled', false);\n            $newDescField.prop('disabled', false);\n            getFieldRow(SELECTORS.NEW_RULE_SET_NAME).show();\n            getFieldRow(SELECTORS.NEW_RULE_SET_DESCRIPTION).show();\n        } else {\n            $newNameField.prop('disabled', true);\n            $newDescField.prop('disabled', true);\n            getFieldRow(SELECTORS.NEW_RULE_SET_NAME).hide();\n            getFieldRow(SELECTORS.NEW_RULE_SET_DESCRIPTION).hide();\n        }\n    };\n\n    const toggleSegmentFields = function(segmentWrapper) {\n        var $segment = $(segmentWrapper);\n        var targetType = getField(SELECTORS.TARGET_TYPE, $segment).val();\n        var checkType = getField(SELECTORS.CHECK_TYPE, $segment).val();\n\n        // Target Identifier visibility (Module type/name)\n        var $targetIdentifierRow = getFieldRow(SELECTORS.TARGET_IDENTIFIER, $segment);\n        if (targetType === 'MODULE' || targetType === 'SUB_ELEMENT') { // Assuming SUB_ELEMENT might also need it\n            $targetIdentifierRow.show();\n            // TODO: Change label for target_identifier based on targetType (e.g., \"Module Type\", \"Sub-element Type\")\n        } else {\n            $targetIdentifierRow.hide();\n        }\n\n        // HAS_CONTENT / NOT_HAS_CONTENT fields\n        var $contentChildTypeRow = getFieldRow(SELECTORS.CONTENT_CHILD_TYPE, $segment);\n        var $contentChildIdentifierRow = getFieldRow(SELECTORS.CONTENT_CHILD_IDENTIFIER, $segment);\n\n        // HAS_SETTING / NOT_HAS_SETTING fields\n        var $settingNameRow = getFieldRow(SELECTORS.SETTING_NAME, $segment);\n        var $settingOperatorRow = getFieldRow(SELECTORS.SETTING_OPERATOR, $segment);\n        var $settingExpectedValueRow = getFieldRow(SELECTORS.SETTING_EXPECTED_VALUE, $segment);\n\n        if (checkType === 'HAS_CONTENT' || checkType === 'NOT_HAS_CONTENT') {\n            $contentChildTypeRow.show();\n            // TODO: Potentially show/hide $contentChildIdentifierRow based on $contentChildTypeRow selection\n            $contentChildIdentifierRow.show(); // Show by default for now\n\n            $settingNameRow.hide();\n            $settingOperatorRow.hide();\n            $settingExpectedValueRow.hide();\n        } else if (checkType === 'HAS_SETTING' || checkType === 'NOT_HAS_SETTING') {\n            $contentChildTypeRow.hide();\n            $contentChildIdentifierRow.hide();\n\n            $settingNameRow.show();\n            $settingOperatorRow.show();\n            $settingExpectedValueRow.show();\n            // TODO: Dynamically populate setting_name dropdown based on target_type\n            // TODO: Change setting_expected_value input type based on setting_name\n        } else { // Neither (or error), hide all optional\n            $contentChildTypeRow.hide();\n            $contentChildIdentifierRow.hide();\n            $settingNameRow.hide();\n            $settingOperatorRow.hide();\n            $settingExpectedValueRow.hide();\n        }\n    };\n\n    const toggleActionFields = function(actionWrapper) {\n        var $action = $(actionWrapper);\n        var actionType = getField(SELECTORS.ACTION_TYPE, $action).val();\n\n        var $changeSettingNameRow = getFieldRow(SELECTORS.ACTION_CHANGE_SETTING_NAME, $action);\n        var $changeSettingNewValueRow = getFieldRow(SELECTORS.ACTION_CHANGE_SETTING_NEW_VALUE, $action);\n\n        var $addContentChildTypeRow = getFieldRow(SELECTORS.ACTION_ADD_CONTENT_CHILD_TYPE, $action);\n        var $addContentChildIdentifierRow = getFieldRow(SELECTORS.ACTION_ADD_CONTENT_CHILD_IDENTIFIER, $action);\n        var $addContentInitialSettingsRow = getFieldRow(SELECTORS.ACTION_ADD_CONTENT_INITIAL_SETTINGS, $action);\n\n        if (actionType === 'CHANGE_SETTING') {\n            $changeSettingNameRow.show();\n            $changeSettingNewValueRow.show();\n            // TODO: Dynamically populate action_change_setting_name based on the rule's target context\n            $addContentChildTypeRow.hide();\n            $addContentChildIdentifierRow.hide();\n            $addContentInitialSettingsRow.hide();\n        } else if (actionType === 'ADD_CONTENT') {\n            $changeSettingNameRow.hide();\n            $changeSettingNewValueRow.hide();\n\n            $addContentChildTypeRow.show();\n            // TODO: Potentially show/hide $addContentChildIdentifierRow based on $addContentChildTypeRow selection\n            $addContentChildIdentifierRow.show(); // Show for now\n            $addContentInitialSettingsRow.show();\n        } else { // Neither selected, hide all\n            $changeSettingNameRow.hide();\n            $changeSettingNewValueRow.hide();\n            $addContentChildTypeRow.hide();\n            $addContentChildIdentifierRow.hide();\n            $addContentInitialSettingsRow.hide();\n        }\n    };\n\n    const addConditionSegment = function(chainId) {\n        log.debug('Attempting to add condition segment to chain: ' + chainId);\n        var $lastSegment = form.find('#conditionchain_' + chainId + '_wrapper ' + SELECTORS.SEGMENT_WRAPPER).last();\n        if (!$lastSegment.length) {\n            log.error('Could not find last segment for chain ' + chainId);\n            return;\n        }\n        var $newSegment = $lastSegment.clone();\n        // TODO: IMPORTANT - Update all IDs and names in $newSegment to be unique.\n        // This requires a robust way to increment the segment index in names like 'chain_0_segment_0_target_type'.\n        // For example, 'chain_0_segment_0_target_type' -> 'chain_0_segment_1_target_type'\n        // And update wrapper IDs like 'conditionchain_0_segment_0_wrapper'\n        // Reset field values in the new segment.\n        $newSegment.find('input[type=\"text\"], textarea').val('');\n        $newSegment.find('select').prop('selectedIndex', 0);\n\n        $newSegment.insertAfter($lastSegment);\n        // Re-initialize toggles for the new segment\n        toggleSegmentFields($newSegment);\n        // Re-attach event listeners if they are segment-specific (like onchange for target_type)\n        // For simplicity, we're using delegated events where possible.\n        log.debug('New segment cloned (NEEDS ID/NAME UPDATES)');\n    };\n\n    const addConditionChain = function() {\n        log.debug('Attempting to add condition chain');\n        var $lastChain = form.find('.conditionchain-wrapper').last();\n         if (!$lastChain.length) {\n            log.error('Could not find last chain wrapper');\n            return;\n        }\n        var $newChain = $lastChain.clone();\n        // TODO: IMPORTANT - Update all IDs and names in $newChain.\n        // This includes chain wrapper IDs, segment wrapper IDs within, and all form field names/IDs.\n        // e.g. 'conditionchain_0_wrapper' -> 'conditionchain_1_wrapper'\n        // 'chain_0_segment_0_target_type' -> 'chain_1_segment_0_target_type'\n        // 'chain_0_logical_operator_to_next' -> 'chain_1_logical_operator_to_next'\n        // Reset field values.\n        $newChain.find('input[type=\"text\"], textarea').val('');\n        $newChain.find('select').prop('selectedIndex', 0);\n        // Remove extra segments if the original had multiple, start with one.\n        $newChain.find(SELECTORS.SEGMENT_WRAPPER).not(':first').remove();\n\n        $newChain.insertAfter($lastChain);\n        // Re-initialize toggles for the new chain's first segment\n        toggleSegmentFields($newChain.find(SELECTORS.SEGMENT_WRAPPER).first());\n        log.debug('New chain cloned (NEEDS ID/NAME UPDATES)');\n    };\n\n    const addFailureAction = function() {\n        log.debug('Attempting to add failure action');\n        var $lastAction = form.find(SELECTORS.ACTION_WRAPPER).last();\n        if (!$lastAction.length) {\n            log.error('Could not find last action wrapper');\n            return;\n        }\n        var $newAction = $lastAction.clone();\n        // TODO: IMPORTANT - Update all IDs and names in $newAction.\n        // e.g. 'action_0_wrapper' -> 'action_1_wrapper'\n        // 'action_0_button_label' -> 'action_1_button_label'\n        // Reset field values.\n        $newAction.find('input[type=\"text\"], textarea').val('');\n        $newAction.find('select').prop('selectedIndex', 0);\n\n        $newAction.insertAfter($lastAction);\n        toggleActionFields($newAction);\n        log.debug('New action cloned (NEEDS ID/NAME UPDATES)');\n    };\n\n\n    return {\n        init: function() {\n            log.debug('block_course_audit/rule_form: Initializing');\n            // Find the form element, assuming it's the closest form to the rule name input\n            // This could be made more robust if the form has a specific ID\n            form = $('input[name=\"rulename\"]').closest('form');\n            if (!form.length) {\n                log.error('block_course_audit/rule_form: Could not find the Moodle form.');\n                return;\n            }\n\n            // --- Initial setup ---\n            toggleRuleSetFields();\n            // Initial toggle for all existing segments on the page\n            form.find(SELECTORS.SEGMENT_WRAPPER).each(function() {\n                toggleSegmentFields(this);\n            });\n            // Initial toggle for all existing actions on the page\n            form.find(SELECTORS.ACTION_WRAPPER).each(function() {\n                toggleActionFields(this);\n            });\n\n            // --- Event Listeners ---\n            // Rule Set\n            form.on('change', SELECTORS.RULE_SET_ID, toggleRuleSetFields);\n\n            // Delegated event listeners for condition segments (works for cloned segments too)\n            form.on('change', SELECTORS.TARGET_TYPE, function() {\n                toggleSegmentFields($(this).closest(SELECTORS.SEGMENT_WRAPPER));\n            });\n            form.on('change', SELECTORS.CHECK_TYPE, function() {\n                toggleSegmentFields($(this).closest(SELECTORS.SEGMENT_WRAPPER));\n            });\n\n            // Delegated event listeners for actions (works for cloned actions too)\n            form.on('change', SELECTORS.ACTION_TYPE, function() {\n                toggleActionFields($(this).closest(SELECTORS.ACTION_WRAPPER));\n            });\n\n            // Add buttons (handle multiple segment buttons if chains are cloned)\n            form.on('click', SELECTORS.ADD_SEGMENT_BUTTON_PREFIX + '_0', function() { // Attach specifically to chain 0 for now.\n                // This needs to be more dynamic if chains are added.\n                // We'd need to extract the chain index from the button's name/ID.\n                var chainId = 0; // Example, needs to be dynamic for multiple chains\n                addConditionSegment(chainId);\n            });\n            // More robust way if we have multiple \"add segment\" buttons:\n            // form.on('click', 'button[name^=\"add_segment_to_chain_\"]', function() {\n            //     var name = $(this).attr('name');\n            //     var chainId = name.replace('add_segment_to_chain_', '');\n            //     addConditionSegment(chainId);\n            // });\n\n\n            form.on('click', SELECTORS.ADD_CHAIN_BUTTON, addConditionChain);\n            form.on('click', SELECTORS.ADD_ACTION_BUTTON, addFailureAction);\n\n            log.debug('block_course_audit/rule_form: Initialization complete.');\n        }\n    };\n});"],"names":["define","$","log","SELECTORS","form","getField","selector","baseElement","find","getFieldRow","closest","toggleRuleSetFields","ruleSetId","val","$newNameField","$newDescField","prop","show","hide","toggleSegmentFields","segmentWrapper","$segment","targetType","checkType","$targetIdentifierRow","$contentChildTypeRow","$contentChildIdentifierRow","$settingNameRow","$settingOperatorRow","$settingExpectedValueRow","toggleActionFields","actionWrapper","$action","actionType","$changeSettingNameRow","$changeSettingNewValueRow","$addContentChildTypeRow","$addContentChildIdentifierRow","$addContentInitialSettingsRow","addConditionChain","debug","$lastChain","last","length","$newChain","clone","not","remove","insertAfter","first","error","addFailureAction","$lastAction","$newAction","init","each","this","on","chainId","$lastSegment","$newSegment","addConditionSegment"],"mappings":"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"}